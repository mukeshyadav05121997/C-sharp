This allows us to perform a single action in different ways.
There are two types of polymorphism in C#:
Static / Compile Time Polymorphism.
Dynamic / Runtime Polymorphism



*********Static/compile Polymorphism***************
Its of two type
1.Method Overloading:
2.Operator Overlaoding
==========================================================================================================================================================
1.  METHOD OVERLOADING
It is also known as Early Binding. Method overloading is an example of Static Polymorphism.
In overloading, the method / function has a same name but different signatures. 
It is also known as Compile Time Polymorphism because the decision of which method is to be called is made at compile time.
Overloading is the concept in which method names are the same with a different set of parameters
public class TestData  
{  
    public int Add(int a, int b, int c)  
    {  
        return a + b + c;  
    }  
    public int Add(int a, int b)  
    {  
        return a + b(+);  
    }  
}  
class Program  
{  
    static void Main(string[] args)  
    {  
        TestData dataClass = new TestData();  
        int add2 = dataClass.Add(45, 34, 67);  
        int add1 = dataClass.Add(23, 34);  
    }  
} 


2.Operator Overloading::The return type can be of any type except void for unary operators like !, ~, + and dot (.) 
but the return type must be the type of ‘Type’ for – and ++ operators and must be a bool type for true as well as false operators.
But do remember that the true and false operators can be overloaded as pairs only. 
The compilation error arises if a class declares one of these operators without declaring the other.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace structureee
{
  public  class  calculator
    {
        public int number1;
        public int number2;
        public calculator(int num1,int num2)
        {
            number1 = num1;
            number2 = num2;

        }
        public static calculator operator - (calculator c)
        {
            c.number1 = -c.number1;
            c.number2 = -c.number2;
            return c;
        }
        public void display()
        {
            Console.WriteLine("The positive value is {0}",+number1);
            Console.WriteLine("The Negative value is {0}",+number2);
        }
       

    }
   
    
   
    class Program
    {
        static void Main(string[] args)
        {
            calculator obj = new calculator(10,-20);
            obj = -obj;
            obj.display();
         

            

        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------
**Dynamic polymorphism : 
It is of two type:
1.Overide method
2.Virtual method
=======================================================================================
**Override Method
DYNAMIC POLYMORPHISM EXAMPLE IS ABSTRACT CLASS ::::::::::::FOR MORE INFORMATION PLEASE VISIT AT ABSTRACTION TOPIC:
1.IT HAVE SEALED CLASS :WHOSE INHERITANCE CAN NOT BE POSSIBLE:

C# allows you to create abstract classes that are used to provide partial class implementation of an interface.
Implementation is completed when a derived class inherits from it. Abstract classes contain abstract methods, which are implemented by the derived class. 
The derived classes have more specialized functionality.

Here are the rules about abstract classes −

You cannot create an instance of an abstract class

You cannot declare an abstract method outside an abstract class

When a class is declared sealed, it cannot be inherited, abstract classes cannot be declared sealed.

========================================================================================================================================
VIRTUAL METHOD::
C# virtual method is a method that can be redefined in derived classes.
In C#, a virtual method has an implementation in a base class as well as derived the class.
It is used when a method's basic functionality is the same but sometimes more functionality is needed in the derived class.
A virtual method is created in the base class that can be overriden in the derived class.
We create a virtual method in the base class using the virtual keyword and that method is overriden in the derived class using the override keyword.
IMPORTANT POINT:By Default,it is non virtual method:
1. By default, methods are non-virtual. We can't override a non-virtual method.
2. We can't use the virtual modifier with the static, abstract, private or override modifiers. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace structureee
{
  public class Distance
    {
        public Double speed;
        public float time;

        public Distance(double sp,float tm)
        {
            speed = sp;
            time = tm;
        }

        public virtual float calculate()
        {
            return (float)(speed * time);

        }

         class moredetail:Distance
        {
            public float Duration;
            public moredetail(double sp,float tm):base(sp,tm)
            {

            }
            public override float calculate()
            {
                return Duration = (float)(speed * time);
            }

        }

    }
    class Program
    {
        static void Main(string[] args)
        {
            Distance obj = new Distance(20,30);

            Console.WriteLine("The complete Distance is {0}",obj.calculate());

        }
    }
}


























