-------------------GENERICS-----------------------------------------------------------------------------------------------------------
Generics allow you to define a class with placeholders for the type of its fields, methods, parameters, etc.
Generics replace these placeholders with some specific type at compile time.
using System.IO;
using System;

public class gen<T>
{
    private T data;
    public T value
    {
        get
        {
           return this.data; 
        }
        set
        {
           this.data=value; 
        }
        
    }
}

class Program
{
    static void Main()
    {
    gen<string> name=new gen<string>();
    name.value="Mukesh";
    gen<int> birth=new gen<int>();
    birth.value=5;
    
    Console.WriteLine("The name of person is {0}",name.value);
     Console.WriteLine("The birth of person is {0}",birth.value);
    }
}


EXAMPLE OF GENEREICS WITH CONSTRUCTOR
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace generics
{
   public class gen<T>
    {
        
       public gen(T msg)
        {
            Console.WriteLine(msg);
         }
    }
    class Program
    {
        static void Main(string[] args)
        {
            gen<int> obj = new gen<int>(6);
            
        }
    }
}


Generic class	                                            Description
Collection<T>	                                          The basis for a generic collection Comparer compares two generic objects for equality
Dictionary<TKey, TValue>	                          A generic collection of name/value pairs
List<T>	                                                  A dynamically resizable list of Items
Queue<T>	                                          A generic implementation of a first-in, first-out (FIFO) list
Stack<T>	                                          A generic implementation of a last-in, first-out (LIFO) list


Generics is a technique that improves your programs in many ways such as:

It helps you in code reuse, performance and type safety.
You can create your own generic classes, methods, interfaces and delegates.
You can create generic collection classes.
The .NET framework class library contains many new generic collection classes in System.Collections.Generic namespace.
You can get information on the types used in generic data type at run-time
=========================================================================================================================================
========================================================================================================================================
------------------------------COLLECTION------------------------------------------------------------------------------------------

Collection classes are specialized classes for data storage and retrieval.
These classes provide support for stacks, queues, lists, and hash tables
Collections provide a more flexible way to work with groups of objects. 
Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change. 
For some collections,you can assign a key to any object that you put 
into the collection so that you can quickly retrieve the object by using the key.

NON GENERICS COLLECTION  ++++++++++++++++++++++++++
@@@@@
    1)ArrayList:ArrayList stores objects of any type like an array.
      However, there is no need to specify the size of the ArrayList like with an array as it grows automatically
      using System.IO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace collectionarraylist
{
    class Program
    {
        static void Main(string[] args)
        {
            ArrayList myarrraylsit = new ArrayList();


                myarrraylsit.Add("Hii");
                myarrraylsit.Add("Mukesh");
                myarrraylsit.Add("Yadav");
                myarrraylsit.Add("wish u great ");
                myarrraylsit.Add(18);
                myarrraylsit.Add("Birthday");


            foreach (var num in myarrraylsit)
            {
                Console.WriteLine(num);
               
            }
            Console.WriteLine(myarrraylsit.Capacity);
            Console.WriteLine(myarrraylsit.Count);

            Console.WriteLine(myarrraylsit.IsFixedSize);
            Console.WriteLine(myarrraylsit.IsReadOnly);
            Console.WriteLine(myarrraylsit.IsSynchronized);

            if(myarrraylsit.Contains("Yadav"))
            {
                Console.WriteLine("Yes exist at {0}",myarrraylsit.IndexOf("Yadav"));

            }
            else
            {
                Console.WriteLine("It does not exist");
            }

          
            

            myarrraylsit.RemoveAt(1);

            foreach (var num in myarrraylsit)
            {
                Console.WriteLine(num);

            }




        }
    }
}

  



    
   2nd EXAMPLE
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace p
{
    class Program
    {
        static void Main(string[] args)
        {
            aRR myarray = new ArrayList();
            {
                myarray.Add(1);
                myarray.Add("Mukesh");
                myarray.Insert(2, "Yadav"); //after two place

                foreach(var a in myarray)
                {
                    Console.WriteLine(a);
                }
            }
            
        }
    }
}

=====================================================================================================================================================================================================


    
@@@@@    
2)COLLECTION:::ICollection: The ICollection interface is the base interface for all the collections that defines sizes, enumerators, and synchronization methods for all non-generic collections. 
The Queue and Stack collection implement ICollection inferface.
    1)Queue:fifo
    2)stack:LIFO
@@@@@
3)Dictionary::::IDictionary: The IDictionary interface represents a non-generic collection of key/value pairs. 
The Hashtable and SortedList implement IDictionary interface and so they store key/value pairs
    1)Hashtable:Hashtable stores key and value pairs. It retrieves the values by comparing the hash value of the keys
    
    using System;
using System.Collections;

public class Program
{
	public static void Main()
	{
		Hashtable ht = new Hashtable()
		{
			{ 1, "One" },
			{ 2, "Two" },
			{ 3, "Three" },
			{ 4, "Four" },
			{ 5, null },
			{ "Fv", "Five" },
			{ 8.5F, 8.5 }
		};

		
		foreach (DictionaryEntry item in ht)
			Console.WriteLine("key:{0}, value:{1}",item.Key, item.Value);
	}
}

output
key:Fv, value:Five
key:8.5, value:8.5
key:5, value:
key:4, value:Four
key:3, value:Three
key:2, value:Two
key:1, value:One
    
    
*****2)sortedlist:SortedList stores key and value pairs. It automatically arranges elements in ascending order of key by default.
                C# includes both, generic and non-generic SortedList collection
		
using System;
using System.Collections;

public class Program
{
	public static void Main()
	{
		SortedList sortedList = new SortedList(){
                                {3, "Three"},
                                {4, "Four"},
                                {1, "One"},
                                {5, "Five"},
                                {2, "Two"}
                            };
		
		foreach(DictionaryEntry kvp in sortedList)
			Console.WriteLine("key: {0}, value: {1}", kvp.Key , kvp.Value );
	}
}
output
key: 1, value: One
key: 2, value: Two
key: 3, value: Three
key: 4, value: Four
key: 5, value: Five

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=

GENERICS COLLECTION:::
DICTIONARY::Dictionary is a generic collection. So it can store key-value pairs of specific data types.
Dictionary throws an exception if we try to find a key which does not exist.
the Dictionary in C# is a collection of Keys and Values, where key is like word and value is like definition.
Dictionary cannot include duplicate or null keys, where as values can be duplicated or set as null.
Keys must be unique otherwise it will throw a runtime exception.

using System;
using System.Collections.Generic;
					
public class Program
{
	public static void Main()
	{
		Dictionary<int, string> dict = new Dictionary<int, string>()
                                                            {
                                                                {1,"One"},
                                                                {2, "Two"},
                                                                {3,"Three"}
                                                            };

		foreach (KeyValuePair<int, string> item in dict)
		{
			Console.WriteLine("Key: {0}, Value: {1}", item.Key, item.Value);
		}
	}
}

output:Key: 1, Value: One
Key: 2, Value: Two
Key: 3, Value: Three
