Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. 
This also provides an opportunity to reuse the code functionality and speeds up implementation time.
*Type of Inheritance
1.single 2:Hierarical 3.Multi-level 4.Multiple(Interface)
------------------------------------------------------------------------------------------------------------------------------
** Single Inheritance **
It is the type of inheritance in which there is one base class and one derived class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{

  public class Base  ///base class
    {
        public string credit()
        {
            return "1000 is credit";
        }
    }
    public class derived :Base //derived class
    {
        public string debit()
        {
            credit();
            return "Balance is debited";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            derived obj = new derived();
            //obj.credit();
            //obj.debit();
            Console.WriteLine("The aleet is {0}", obj.debit());
            Console.ReadKey();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------
**Hierarical inheritance**
This is the type of inheritance in which there are multiple classes derived from one base class. 
This type of inheritance is used when there is a requirement of one class feature that is needed in multiple classes
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{

  public class Base   // base class
    {
        public string credit()
        {
            return "1000 is credit";
        }
    }
    public class derived :Base  //first derived class
    {
        public string debit()
        {
            credit();
            return "Balance is debited";
        }
    }
    public class secondderived:Base   //second derived class
    {
        public string both()
        {
            return "neither credit nor debit";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            secondderived obj = new secondderived();
            //obj.credit();
            //obj.debit();
            Console.WriteLine("The aleet is {0}", obj.both());
            Console.ReadKey();
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------
**Multi-Level Inheritance**
When one class is derived from another derived class then this type of inheritance is called multilevel inheritance.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{

  public class Base
    {
        public string credit()
        {
            return "1000 is credit";
        }
    }
    public class derived :Base
    {
        public string debit()
        {
            credit();
            return "Balance is debited";
        }
    }
    public class secondderived:derived
    {
        public string both()
        {
            return "neither credit nor debit";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            secondderived obj = new secondderived();
            //obj.credit();
            //obj.debit();
            Console.WriteLine("The aleet is {0}", obj.both());
            Console.ReadKey();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------
Interface::::::: Multiple Inheritance
Like abstract classes, interfaces cannot be used to create objects 
(in the example above, it is not possible to create an "IAnimal" object in the Program class)
Interface methods do not have a body - the body is provided by the "implement" class
On implementation of an interface, you must override all of its methods
Interfaces can contain properties and methods, but not fields/variables
Interface members are by default abstract and public
An interface cannot contain a constructor (as it cannot be used to create objects)


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    public interface IAnimal
    {
        void sound();
    }
    class Pig : IAnimal
    {
        public void sound()
        {
            Console.WriteLine("WOW greate its working");
        }
    }


    class Program
    {
        static void Main(string[] args)
        {
            Pig obj = new Pig();
            obj.sound();
            Console.ReadKey();
        }
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------
ABSTRACT CLASS	                                              1                    INTERFACE
It contains both declaration and definition part.	            1      It contains only a declaration part.
Multiple inheritance is not achieved by abstract class.       1    	Multiple inheritance is achieved by interface.
It contain constructor.	It does not contain constructor.      1
It can contain static members.	                              1       It does not contain static members.
It can contain different types of                             1
access modifiers like public, private, protected etc.	        1      It only contains public access modifier because everything in the interface is public.
The performance of an abstract class is fast.	                1       The performance of interface is slow because 
                                                              1      it requires time to search actual method in the corresponding class.
--------------------------------------------------------------------------------------------------------------------------------------------------------














