Constructor is member  function which get executed when object of is created of that class
A constructor has exactly the same name as that of class and it does not have any return type

There are two type of constructor
Default constructor
Parameterized constructor
Copy constructor
Static constructor
Private constructor
--------------------------------------------------------------------------------------------------------------------------------
-----------------------------Default constructor---------------------------------------------------------------------------------
A constructor without any parameters is called a default constructor. 
If we do not create constructor the class will automatically call default constructor when an object is created.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace constructor
{

    class rectangle
    {
        double length;
        double breadth;

        public rectangle() //constructor
        {
            Console.WriteLine("Wow Great,Object is created hence constructor is executed");
        }
        public void setdata(double len,double bread)
        {
            length = len;
            breadth = bread;

        }
        public double getdata()
        {
            return length * breadth;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            rectangle line1 = new rectangle(); //constructor will executed
            //line1.setdata(4.0, 3.0);
          //  Console.WriteLine("The Area of Rectangle is {0}", line1.getdata());
            Console.ReadKey();
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------PARAMETRIZED CONSTRUCTOR---------------------------------------------------------------------------------------------------------------------
A constructor with at least one parameter is called a parametrized constructor.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace parametrizedConstructor
{
    class param
    {
        public int first;
        public int sec;

        public param(int x,int y)
        {
            first = x;
            sec = y;
        }

    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter the first value");
            int a = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter the Second value value");
            int b = int.Parse(Console.ReadLine());
            param p = new param(a,b);
            int sum = p.first + p.sec;
            Console.WriteLine("The sum is {0}",sum);

        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------COPY CONSTRUCTOR----------------------------------------------------------------------------------------------------------------------
The constructor which creates an object by copying variables from another object is called a copy constructor.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace copy_constructor
{
    class copycon
    {
        public String Firstname;
        public string Lastname;
        public int Salary;
        public int age;

        public copycon()
        {

        }
        public copycon(copycon c)
        {
            Firstname = c.Firstname;
            Lastname = c.Lastname;
            Salary = c.Salary;
            age = c.age;

        }

    }

    class Program
    {
        static void Main(string[] args)
        {
            copycon obj1 = new copycon();
            copycon obj2 = new copycon(obj1);
            Console.WriteLine("Enter the First Name");
            obj2.Firstname = Convert.ToString(Console.ReadLine());
            Console.WriteLine("Enter the Last Name");
            obj2.Lastname = Convert.ToString(Console.ReadLine());
            Console.WriteLine("Enter the salary");
            obj2.Salary = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter your age");
            obj2.age = Convert.ToInt32(Console.ReadLine());

            Console.WriteLine("FirstName:"+obj2.Firstname);
            Console.WriteLine("LastName:"+obj2.Lastname);
            Console.WriteLine("Salary:"+obj2.Salary);
            Console.WriteLine("Age:"+obj2.age);
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------Static constructor------------------------------------------------------------------------------------------------------
A static constructor is used to initialize any static data, or to perform a particular action that needs to be performed once only. 
It is called automatically before the first instance is created or any static members are referenced.
Characteristic of static constructor

A static constructor does not take any access modifiers.
A static constructor does not have a parameter.
A static constructor is called automatically to initialize the class before the first instance is created or any static members are referenced.
A static constructor cannot be called directly.
The user has no control over when the static constructor is executed in the program.
A typical use of static constructors is when the class is using a log file and the constructor is used to write entries to this file.
A class can have only one static constructor.
It can access only static members of a class.

static Customer()  
        {  
            discount = 10+"%";  
        } 
        
        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------PRIVATE CONSTRUCTOR--------------------------------------------------------------------------------------------------------------------
A private constructor is a special instance constructor. 
It is generally used in classes that contain static members only.
If a class has one or more private constructors and no public constructors, other classes (except nested classes) cannot create instances of this class. 
The use of private constructor is to serve singleton classes. A singleton class is one which limits the number of objects created to one. 
Using private constructor we can ensure that no more than one object can be created at a time
One use of private constructor is when we have the only static member.
It provides the implementation of singleton class pattern.
Once we provide constructor (private/public/any) the compiler will not add the no parameter public constructor to any class.
Example

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace @static
{
    class Candidate
    {
        private Candidate()
        {

        }
        public static int CandidatevisitedforInterview;

        public static int countcandidate()
        {
            return ++CandidatevisitedforInterview;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {

           Candidate.CandidatevisitedforInterview = 20;
            Candidate.countcandidate();
            Console.WriteLine("The Visited Person for Interview is {0}",Candidate.CandidatevisitedforInterview);
        }
    }
}







**************************************************************************************************************************************
Destructor:
A destructor is a special member function of a class that is executed whenever an object of its class goes out of scope.
A destructor has exactly the same name as that of the class with a prefixed tilde (~) and it can neither return a value nor can it take any parameters.
Destructor can be very useful for releasing memory resources before exiting the program. Destructors cannot be inherited or overloaded
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace constructor
{

    class rectangle
    {
        double length;
        double breadth;

        public rectangle()
        {
            Console.WriteLine("Wow Great,Object is created hence constructor is executed");
        }
        ~ rectangle() //destructor
        {
            Console.WriteLine("This is good way to release the memory");
        }
        public void setdata(double len,double bread)
        {
            length = len;
            breadth = bread;

        }
        public double getdata()
        {
            return length * breadth;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            rectangle line1 = new rectangle(); //constructor will executed
            line1.setdata(4.0, 3.0);
          Console.WriteLine("The Area of Rectangle is {0}", line1.getdata());
            //Console.ReadKey();
        }
    }
}



