A delegate is an object which refers to a method or you can say it is a reference type variable that can hold a reference to the methods. 
Delegates in C# are similar to the function pointer in C/C++. 
It provides a way which tells which method is to be called when an event is triggered
 
 **Important point
#Provides a good way to encapsulate the methods.
#Delegates are the library class in System namespace.
#These are the type-safe pointer of any method.
#Delegates are mainly used in implementing the call-back methods and events.
#Delegates can be chained together as two or more methods can be called on a single event.
#It doesnâ€™t care about the class of the object that it references

Declaration of Delegates
Delegate type can be declared using the delegate keyword.
Once a delegate is declared, delegate instance will refer and 
call those methods whose return type and parameter-list matches with the delegate declaration.

@@@Syntax:
[modifier] delegate [return_type] [delegate_name] ([parameter_list]);
*modifier: It is the required modifier which defines the access of delegate and it is optional to use.
*delegate: It is the keyword which is used to define the delegate.
*return_type: It is the type of value returned by the methods which the delegate will be going to call. 
*It can be void. A method must have the same return type as the delegate.
*delegate_name: It is the user-defined name or identifier for the delegate.
*parameter_list: This contains the parameters which are required by the method when called through the delegate

@@@@@@@@@Example&&&&&&&&&&&&&&&&&&
class Geeks { 
      
// Declaring the delegates 
// Here return type and parameter type should  
// be same as the return type and parameter type 
// of the two methods 
// "addnum" and "subnum" are two delegate names 
public delegate void addnum(int a, int b); 
public delegate void subnum(int a, int b); 
      
    // method "sum" 
    public void sum(int a, int b) 
    { 
        Console.WriteLine("(100 + 40) = {0}", a + b); 
    } 
  
    // method "subtract" 
    public void subtract(int a, int b) 
    { 
        Console.WriteLine("(100 - 60) = {0}", a - b); 
    } 
  
// Main Method 
public static void Main(String []args) 
{ 
      
    // creating object "obj" of class "Geeks" 
    Geeks obj = new Geeks(); 
  
    // creating object of delegate, name as "del_obj1"  
    // for method "sum" and "del_obj2" for method "subtract" & 
    // pass the parameter as the two methods by class object "obj" 
    // instantiating the delegates 
    addnum del_obj1 = new addnum(obj.sum); 
    subnum del_obj2 = new subnum(obj.subtract); 
  
    // pass the values to the methods by delegate object 
    del_obj1(100, 40); 
    del_obj2(100, 60); 
  
    // These can be written as using 
    // "Invoke" method 
    // del_obj1.Invoke(100, 40); 
    // del_obj2.Invoke(100, 60); 
} 
} 
} 
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
          
